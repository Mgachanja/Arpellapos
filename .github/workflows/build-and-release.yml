name: Build and Release Arpella POS

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]

env:
  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, macos-latest, ubuntu-latest]
        node-version: [18.x]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      # Platform-specific setup: macOS
      - name: Prepare build tools (macOS)
        if: matrix.os == 'macos-latest'
        shell: bash
        run: |
          brew update || true
          brew install python@3.11 || true
          export PATH="/opt/homebrew/opt/python@3.11/bin:$PATH"
          python3 --version
          python3 -m pip install --upgrade pip setuptools wheel
          python3 - <<'PY'
import sys
try:
  import distutils.sysconfig
  print("distutils OK")
except Exception as e:
  print("distutils FAIL", e)
  sys.exit(1)
PY

      # Platform-specific setup: Ubuntu
      - name: Prepare build tools (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        shell: bash
        run: |
          sudo apt-get update -y
          sudo apt-get install -y python3 python3-pip python3-distutils build-essential pkg-config libc6-dev
          python3 --version
          python3 -m pip install --upgrade pip setuptools wheel
          python3 - <<'PY'
import sys
try:
  import distutils
  print("distutils OK")
except Exception as e:
  print("distutils FAIL", e)
  sys.exit(1)
PY

      # Platform-specific setup: Windows
      - name: Prepare build tools (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          if (-not (Get-Command python -ErrorAction SilentlyContinue)) {
            choco install python --version=3.11.4 -y || Write-Host "choco install python failed or choco missing"
          }
          python --version
          python -m pip install --upgrade pip setuptools wheel
          python - <<'PY'
import sys
try:
  import distutils
  print("distutils OK")
except Exception as e:
  print("distutils FAIL", e)
  sys.exit(1)
PY

      - name: Install dependencies
        run: npm ci

      - name: Generate icons
        run: npm run make-icons

      - name: Build React app
        run: npm run build:web
        env:
          CI: false

      - name: Build Electron (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          echo "Building Electron (Windows)..."
          npx electron-builder --win --x64
        env:
          GH_TOKEN: ${{ env.GH_TOKEN }}

      - name: Build Electron (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          echo "Building Electron (macOS)..."
          npx electron-builder --mac
        env:
          GH_TOKEN: ${{ env.GH_TOKEN }}

      - name: Build Electron (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          echo "Building Electron (Linux)..."
          npx electron-builder --linux
        env:
          GH_TOKEN: ${{ env.GH_TOKEN }}

      - name: Upload Windows artifacts
        if: matrix.os == 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: windows-build
          path: |
            dist/*.exe
            dist/*.nsis.*
            dist/latest*.yml
            dist/*.zip

      - name: Upload macOS artifacts
        if: matrix.os == 'macos-latest'
        uses: actions/upload-artifact@v4
        with:
          name: macos-build
          path: |
            dist/*.dmg
            dist/*.zip
            dist/latest*.yml

      - name: Upload Linux artifacts
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v4
        with:
          name: linux-build
          path: |
            dist/*.AppImage
            dist/*.deb
            dist/*.rpm
            dist/latest*.yml

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: Prepare release files
        run: |
          mkdir -p release-files
          find artifacts/ -type f \( -iname "*.exe" -o -iname "*.dmg" -o -iname "*.zip" -o -iname "*.AppImage" -o -iname "*.deb" -o -iname "*.rpm" -o -iname "latest*.yml" -o -iname "*.nsis.*" \) -exec cp {} release-files/ \;
          ls -la release-files/

      - name: Create GitHub Release and upload assets
        uses: softprops/action-gh-release@v1
        with:
          files: release-files/*
          generate_release_notes: true
          draft: false
          prerelease: false
          name: Release ${{ github.ref_name }}
          body: |
            ## Changes in this Release

            ### Auto-Update Support
            This release includes auto-update functionality. The app will automatically check for updates and notify users when new versions are available.

            ### Installation Notes
            - **Windows**: Run the `.exe` installer
            - **macOS**: Mount the `.dmg` or use `.zip`
            - **Linux**: Use `.AppImage` or `.deb`/`.rpm` packages
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  test-autoupdate:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18.x
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Test auto-updater configuration
        run: |
          echo "üîç Testing auto-updater configuration..."
          if npm list electron-updater >/dev/null 2>&1; then
            echo "‚úÖ electron-updater dependency found"
          else
            echo "‚ùå electron-updater not found in dependencies"
            exit 1
          fi
          if grep -q '"publish"' package.json; then
            echo "‚úÖ publish configuration found in package.json"
          else
            echo "‚ö†Ô∏è  publish configuration not found in package.json"
          fi
          if [ -f "main.js" ] && grep -q "electron-updater" main.js; then
            echo "‚úÖ electron-updater integration found in main.js"
          else
            echo "‚ö†Ô∏è  electron-updater integration not found in main.js"
          fi
          VERSION=$(node -p "require('./package.json').version")
          echo "üì¶ Current version: $VERSION"
          if [[ $VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "‚úÖ Version format is valid"
          else
            echo "‚ö†Ô∏è  Version format should be semantic (x.y.z)"
          fi
          echo "üéâ Auto-updater configuration test completed!"
