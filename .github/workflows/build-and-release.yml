name: Build and Release Arpella POS

# Triggers: push to main/master and any tag that starts with 'v'
on:
  push:
    branches: [ main, master ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]

# Ensure the GITHUB_TOKEN has the rights to create releases and upload assets
permissions:
  contents: write
  packages: write
  actions: read

env:
  # keep GH_TOKEN env for any tools that expect it; points to the built-in token
  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  build:
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18.x
          cache: 'npm'

      - name: Prepare build tools (Windows)
        shell: pwsh
        run: |
          if (-not (Get-Command python -ErrorAction SilentlyContinue)) {
            choco install python --version=3.11.4 -y || Write-Host "choco install python failed or choco missing"
          }
          python --version
          python -m pip install --upgrade pip setuptools wheel
          python -c "
          import sys
          try:
            import distutils
            print('distutils OK')
          except Exception as e:
            print('distutils FAIL', e)
            sys.exit(1)
          "

      - name: Install dependencies with retry
        shell: pwsh
        run: |
          $maxRetries = 3
          $retryCount = 0
          $success = $false
          
          while (-not $success -and $retryCount -lt $maxRetries) {
            try {
              Write-Host "Attempt $($retryCount + 1) of $maxRetries"
              npm ci
              $success = $true
            } catch {
              $retryCount++
              if ($retryCount -lt $maxRetries) {
                Write-Host "Installation failed, retrying in 10 seconds..."
                Start-Sleep -Seconds 10
              } else {
                Write-Host "All retry attempts failed"
                exit 1
              }
            }
          }

      - name: Generate icons
        run: npm run make-icons

      - name: Build React app
        run: npm run build:web
        env:
          CI: false

      - name: Build Electron (Windows)
        run: npx electron-builder --win --x64
        env:
          GH_TOKEN: ${{ env.GH_TOKEN }}

      - name: Upload Windows artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows-build
          path: |
            dist/*.exe
            dist/*.nsis.*
            dist/latest*.yml
            dist/*.zip

  test-autoupdate:
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18.x
          cache: 'npm'

      - name: Install dependencies with retry
        run: |
          max_retries=3
          retry_count=0
          
          until [ $retry_count -ge $max_retries ]
          do
            echo "Attempt $((retry_count + 1)) of $max_retries"
            npm ci && break
            retry_count=$((retry_count + 1))
            if [ $retry_count -lt $max_retries ]; then
              echo "Installation failed, retrying in 10 seconds..."
              sleep 10
            fi
          done
          
          if [ $retry_count -eq $max_retries ]; then
            echo "All retry attempts failed"
            exit 1
          fi

      - name: Test auto-updater configuration
        run: |
          if npm list electron-updater >/dev/null 2>&1; then
            echo "electron-updater dependency found"
          else
            echo "electron-updater not found in dependencies"
            exit 1
          fi
          if grep -q '"publish"' package.json; then
            echo "publish configuration found in package.json"
          else
            echo "publish configuration not found in package.json"
          fi
          if [ -f "main.js" ] && grep -q "electron-updater" main.js; then
            echo "electron-updater integration found in main.js"
          else
            echo "electron-updater integration not found in main.js"
          fi
          VERSION=$(node -p "require('./package.json').version")
          if [[ $VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Version format is valid: $VERSION"
          else
            echo "Version format should be semantic (x.y.z): $VERSION"
          fi

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
      - name: Checkout code (fetch tags)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: Prepare release files
        run: |
          set -e
          VERSION=$(node -p "require('./package.json').version")
          mkdir -p release-files
          # Copy relevant artifacts
          find artifacts/ -type f \( -iname "*.exe" -o -iname "*.zip" -o -iname "latest*.yml" -o -iname "*.nsis.*" \) -exec cp {} release-files/ \;
          # Rename .exe to canonical installer name
          cd release-files || exit 1
          for file in *.exe; do
            if [ -f "$file" ]; then
              newname="Arpella-POS-Setup-${VERSION}.exe"
              if [ "$file" != "$newname" ]; then
                mv "$file" "$newname"
                echo "Renamed: $file -> $newname"
              fi
            fi
          done
          echo "Release files:"
          ls -la

      - name: Ensure there are release files
        run: |
          if [ -z "$(ls -A release-files 2>/dev/null)" ]; then
            echo "No release files found in release-files/ - aborting."
            exit 1
          fi
          echo "Found release files, proceeding."

      - name: Create GitHub Release and upload assets
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          files: release-files/*
          generate_release_notes: true
          draft: false
          prerelease: false
          body: |
            ## Changes in this Release

            ### Auto-Update Support
            This release includes auto-update functionality. The app will automatically check for updates and notify users when new versions are available.

            ### Installation Notes
            - **Windows**: Run the `.exe` installer

            ### Files
            - Setup installer with auto-update capability
            - Portable version available
            - Auto-update metadata included

            ### What's New
            - Enhanced printer support
            - Improved receipt formatting
            - Background auto-update functionality
            - Better error handling and logging
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}